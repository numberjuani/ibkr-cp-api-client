use std::fmt::{Display, Formatter};

use serde::{Deserialize, Serialize};


#[derive(Default,Debug, Clone, Copy, PartialEq, Eq, Hash, Serialize, Deserialize)]
pub enum Exchange {
    #[default] SMART,
    AMEX,
    NYSE,
    CBOE,
    PHLX,
    CHX,
    ARCA,
    ISLAND,
    ISE,
    IDEAL,
    NASDAQQ,
    NASDAQ,
    DRCTEDGE,
    BEX,
    BATS,
    NITEECN,
    EDGEA,
    CSFBALGO,
    JEFFALGO,
    CSFBCROSS,
    NYSENASD,
    PSX,
    BYX,
    ITG,
    PDQ,
    IBKRATS,
    CITADEL,
    MIAX,
    IBDARK,
    CITADELDP,
    NASDDARK,
    IEX,
    WEDBUSH,
    SUMMER,
    WINSLOW,
    FINRA,
    LIQITG,
    UBSDARK,
    BTIG,
    VIRTU,
    LEERINK,
    JEFF,
    OPCO,
    COWEN,
    DBK,
    JPMC,
    EDGX,
    JANE,
    NEEDHAM,
    FRACSHARE,
    RBCALGO,
    VIRTUDP,
    BAYCREST,
    FOXRIVER,
    MND,
    NITEEXST,
    PEARL,
    GSDARK,
    NITERTL,
    NYSENAT,
    IEXMID,
    HRT,
    FLOWTRADE,
    HRTDP,
    JANELP,
    PEAK6,
    IMCDP,
    CTDLZERO,
    HRTMID,
    JANEZERO,
    HRTEXST,
    IMCLP,
    LTSE,
    SOCGENDP,
    MEMX,
    INTELCROS,
    VIRTUBYIN,
    JUMPTRADE,
    NITEZERO,
    TPLUS1,
    XTXEXST,
    XTXDP,
    XTXMID,
    COWENLP,
    BARCDP,
    JUMPLP,
    OLDMCLP,
    RBCCMALP,
    WALLBETH,
    JONES,
    GSLP,
    CME,
    QBALGO,
    IBUSOPT
}
impl Exchange {
    pub fn from_str(string:&str) -> Self {
        serde_json::from_str::<Self>(&format!("\"{}\"", string)).unwrap()
    }
}
impl Display for Exchange {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        write!(f, "{}", serde_json::to_string(self).unwrap())
    }
}